org: mateoespinoza
service: api-usuario

provider:
  name: aws
  runtime: python3.10
  iam:
    role: arn:aws:iam::399737753482:role/LabRole  # Aquí se asigna el ARN del rol LabRole

  environment:
    USUARIOS_TABLE: ${self:custom.tables.usuarios}

custom:
  tables:
    usuarios: ${self:service}-${opt:stage, 'dev'}-usuarios  # Nombre dinámico para la tabla

resources:
  Resources:
    UsuariosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tables.usuarios}  # Usamos el nombre dinámico
        AttributeDefinitions:
          - AttributeName: tenant_id
            AttributeType: S  # La clave de partición será tenant_id (ID del inquilino)
          - AttributeName: user_id
            AttributeType: S  # La clave de ordenamiento será user_id (ID del usuario)
          - AttributeName: email
            AttributeType: S  # Usado para el GSI
          - AttributeName: created_at
            AttributeType: S  # Usado para el LSI (fecha de creación del usuario)
        KeySchema:
          - AttributeName: tenant_id
            KeyType: HASH  # Clave de partición
          - AttributeName: user_id
            KeyType: RANGE  # Clave de ordenamiento
        BillingMode: PAY_PER_REQUEST

        # Global Secondary Index (GSI) - Usado para consultar por email
        GlobalSecondaryIndexes:
          - IndexName: EmailIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH  # GSI por email
            Projection:
              ProjectionType: ALL

        # Local Secondary Index (LSI) - Usado para consultar por fecha de creación
        LocalSecondaryIndexes:
          - IndexName: CreatedAtIndex
            KeySchema:
              - AttributeName: tenant_id
                KeyType: HASH  # LSI por tenant_id
              - AttributeName: created_at
                KeyType: RANGE  # LSI por created_at (fecha de creación)
            Projection:
              ProjectionType: ALL

functions:
  create_user:
    handler: CrearUsuario.lambda_handler
    events:
      - http:
          path: /usuarios
          method: post
          cors: true

  delete_user:
    handler: DeleteUsuario.lambda_handler
    events:
      - http:
          path: /usuarios/{user_id}
          method: delete
          cors: true

  update_user:
    handler: UpdateUsuario.lambda_handler
    events:
      - http:
          path: /usuarios/{user_id}
          method: put
          cors: true

  login_user:
    handler: LoginUsuario.lambda_handler
    events:
      - http:
          path: /usuarios/login
          method: post
          cors: true

  search_user:
    handler: SearchUsuario.lambda_handler
    events:
      - http:
          path: /usuarios/search
          method: get
          cors: true
